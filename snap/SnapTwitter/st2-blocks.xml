<blocks app="Snap!Twitter 2.0 based on Snap! 5.0, http://snaptwitter.dataliteracy.education" version="1">
    <block-definition s="current location" type="reporter" category="sensing">
        <comment x="0" y="0" w="200" collapsed="false">Reports a three-item list containing the latitude and longitude of the user, and the precision of the measurements. Works only if the user allows snap.berkeley.edu access to location data. Some browsers also require an HTTPS connection to Snap!.</comment>
        <header></header>
        <code></code>
        <translations></translations>
        <inputs></inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>proc</l>
                        </list>
                        <l>if (!proc.geostarted) {&#xD; var geo = navigator.geolocation;&#xD; var cords = [];&#xD; var options = {&#xD; enableHighAccuracy: false,&#xD; };&#xD;&#xD; function success(pos) {&#xD; console.log(pos);&#xD; proc.geocords =&#xD;&#xD; [pos.coords.latitude,&#xD; pos.coords.longitude,&#xD; pos.coords.accuracy];&#xD; }&#xD;&#xD; function error(err) {&#xD; alert("ERROR " + err.code + ": " + err.message);&#xD; }&#xD; proc.geostarted = true;&#xD; proc.geocords = null;&#xD;&#xD;&#xD; console.log("starting geolocation")&#xD; geo.getCurrentPosition(success, error, options);&#xD;} else if (proc.geocords) {&#xD; var cords = proc.geocords;&#xD; proc.geostarted = null;&#xD; proc.geocords = null;&#xD; console.log("returning");&#xD;&#xD;&#xD; return new List(cords);&#xD;} else {&#xD; console.log("yielding");&#xD; proc.pushContext(&apos;doYield&apos;);&#xD; proc.pushContext();&#xD;}</l>
                    </block>
                    <list></list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="text %&apos;haystack&apos; contains %&apos;needle&apos;" type="predicate" category="operators">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>haystack</l>
                            <l>needle</l>
                        </list>
                        <l>return haystack.includes(needle);</l>
                    </block>
                    <list>
                        <block var="haystack"/>
                        <block var="needle"/>
                    </list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="listify %&apos;jsonString&apos;" type="reporter" category="operators">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>jsonString</l>
                        </list>
                        <l>return listify(JSON.parse(jsonString));&#xD;&#xD;function listify(jsonObject) {&#xD; if (jsonObject instanceof Array) {&#xD; return new List(jsonObject.map(function(eachElement) { return listify(eachElement)}));&#xD; } else if (jsonObject&#xD;&#xD; instanceof Object) {&#xD; return new List(Object.keys(jsonObject).map(function(eachKey) { return new List([eachKey,listify(jsonObject[eachKey])])} ))&#xD; } else {&#xD; return jsonObject&#xD; }&#xD;}</l>
                    </block>
                    <list>
                        <block var="jsonString"/>
                    </list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="value at key %&apos;key&apos; of %&apos;lst&apos;" type="reporter" category="operators">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
            <input type="%l"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doForEach">
                        <l>each item</l>
                        <block var="lst"/>
                        <script>
                            <block s="doIf">
                                <block s="reportEquals">
                                    <block s="reportListItem">
                                        <l>1</l>
                                        <block var="each item"/>
                                    </block>
                                    <block var="key"/>
                                </block>
                                <script>
                                    <block s="doReport">
                                        <block s="reportListItem">
                                            <l>2</l>
                                            <block var="each item"/>
                                        </block>
                                    </block>
                                </script>
                            </block>
                        </script>
                    </block>
                </script>
            </block>
            <block s="doReport">
                <l></l>
            </block>
        </script>
    </block-definition>
    <block-definition s="%&apos;method&apos; url: %&apos;url&apos; send: %&apos;payload&apos; headers: %&apos;headers&apos; user %&apos;user&apos; password %&apos;password&apos;" type="reporter" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s" readonly="true">GET<options>GET&#xD;POST&#xD;PUT&#xD;DELETE</options></input>
            <input type="%s">http://snap.berkeley.edu</input>
            <input type="%s"></input>
            <input type="%mult%l" readonly="true"></input>
            <input type="%s"></input>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doReport">
                        <block s="evaluate">
                            <block s="reportJSFunction">
                                <list>
                                    <l>method</l>
                                    <l>url</l>
                                    <l>data</l>
                                    <l>headers</l>
                                    <l>user</l>
                                    <l>password</l>
                                    <l>proc</l>
                                </list>
                                <l>var response, i, header;&#xD;if (!proc.httpRequest) {&#xD; proc.httpRequest = new XMLHttpRequest();&#xD; proc.httpRequest.open(method, url, true);&#xD; proc.assertType(headers, &apos;list&apos;);&#xD; if(user != "" &amp;&amp; password !=&#xD; "")&#xD;&#xD; proc.httpRequest.setRequestHeader(&apos;Authorization&apos;, &apos;Basic &apos; + window.btoa(user+":"+password));&#xD; proc.httpRequest.setRequestHeader(&apos;X-Requested-With&apos;, &apos;XMLHttpRequest&apos;);&#xD;for (i = 1; i &lt;= headers.length(); i += 1) {&#xD; header = headers.at(i);&#xD; proc.assertType(header,&#xD; &apos;list&apos;);&#xD;&#xD; proc.httpRequest.setRequestHeader(&#xD; header.at(1),&#xD; header.at(2)&#xD; );&#xD; }&#xD; proc.httpRequest.send(data || null);&#xD;} else if (proc.httpRequest.readyState === 4) {&#xD; response =&#xD; proc.httpRequest.responseText;&#xD; proc.httpRequest&#xD; = null;&#xD; return response;&#xD;}&#xD;proc.pushContext(&apos;doYield&apos;);&#xD;proc.pushContext();</l>
                            </block>
                            <list>
                                <block var="method"/>
                                <block var="url"/>
                                <block var="payload"/>
                                <block var="headers"/>
                                <block var="user"/>
                                <block var="password"/>
                            </list>
                        </block>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="SnapTwitter request %&apos;req&apos;" type="reporter" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doDeclareVariables">
                        <list>
                            <l>resp</l>
                        </list>
                    </block>
                    <custom-block s="set server to current host"></custom-block>
                    <custom-block s="check login"></custom-block>
                    <block s="doSetVar">
                        <l>resp</l>
                        <custom-block s="%s url: %s send: %s headers: %mult%l user %s password %s">
                            <l>GET</l>
                            <block s="reportJoinWords">
                                <list>
                                    <block var="server"/>
                                    <l>/</l>
                                    <block var="req"/>
                                </list>
                            </block>
                            <l></l>
                            <list></list>
                            <block var="user"/>
                            <block var="password"/>
                        </custom-block>
                    </block>
                    <block s="doIf">
                        <block s="reportNot">
                            <block s="reportGreaterThan">
                                <block s="reportStringSize">
                                    <block var="resp"/>
                                </block>
                                <l>0</l>
                            </block>
                        </block>
                        <script>
                            <block s="doReport">
                                <l></l>
                            </block>
                        </script>
                    </block>
                    <block s="doIf">
                        <block s="reportEquals">
                            <block var="resp"/>
                            <l>unauthorized</l>
                        </block>
                        <script>
                            <block s="doSetVar">
                                <l>user</l>
                                <l>0</l>
                            </block>
                            <custom-block s="check login"></custom-block>
                            <block s="doSetVar">
                                <l>resp</l>
                                <custom-block s="%s url: %s send: %s headers: %mult%l user %s password %s">
                                    <l>GET</l>
                                    <block s="reportJoinWords">
                                        <list>
                                            <block var="server"/>
                                            <l>/</l>
                                            <block var="req"/>
                                        </list>
                                    </block>
                                    <l></l>
                                    <list></list>
                                    <block var="user"/>
                                    <block var="password"/>
                                </custom-block>
                            </block>
                        </script>
                    </block>
                    <block s="doReport">
                        <block var="resp"/>
                    </block>
                </script>
            </block>
        </script>
        <scripts>
            <script x="65.00000099999988" y="534.0000010000001">
                <block s="doIf">
                    <block s="reportLessThan">
                        <block s="reportStringSize">
                            <block var="server"/>
                        </block>
                        <l>2</l>
                    </block>
                    <script>
                        <block s="doSetVar">
                            <l>server</l>
                            <block s="evaluate">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>return prompt("Please enter server URL:");</l>
                                </block>
                                <list></list>
                            </block>
                        </block>
                    </script>
                </block>
            </script>
        </scripts>
    </block-definition>
    <block-definition s="SnapTwitter POST %&apos;req&apos; data %&apos;data&apos;" type="reporter" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <custom-block s="set server to current host"></custom-block>
                    <block s="doDeclareVariables">
                        <list>
                            <l>resp</l>
                        </list>
                    </block>
                    <block s="doSetVar">
                        <l>resp</l>
                        <custom-block s="%s url: %s send: %s headers: %mult%l user %s password %s">
                            <l>POST</l>
                            <block s="reportJoinWords">
                                <list>
                                    <block var="server"/>
                                    <l>/</l>
                                    <block var="req"/>
                                </list>
                            </block>
                            <block var="data"/>
                            <list>
                                <block s="reportNewList">
                                    <list>
                                        <l>Content-Type</l>
                                        <l>application/json</l>
                                    </list>
                                </block>
                            </list>
                            <block var="user"/>
                            <block var="password"/>
                        </custom-block>
                    </block>
                    <block s="doIf">
                        <block s="reportNot">
                            <block s="reportGreaterThan">
                                <block s="reportStringSize">
                                    <block var="resp"/>
                                </block>
                                <l>0</l>
                            </block>
                        </block>
                        <script>
                            <block s="doReport">
                                <l></l>
                            </block>
                        </script>
                    </block>
                    <block s="doIf">
                        <block s="reportEquals">
                            <block var="resp"/>
                            <l>unauthorized</l>
                        </block>
                        <script>
                            <block s="doSetVar">
                                <l>user</l>
                                <l>0</l>
                            </block>
                            <custom-block s="check login"></custom-block>
                            <block s="doSetVar">
                                <l>resp</l>
                                <custom-block s="%s url: %s send: %s headers: %mult%l user %s password %s">
                                    <l>GET</l>
                                    <block s="reportJoinWords">
                                        <list>
                                            <block var="server"/>
                                            <l>/</l>
                                            <block var="req"/>
                                        </list>
                                    </block>
                                    <l></l>
                                    <list></list>
                                    <block var="user"/>
                                    <block var="password"/>
                                </custom-block>
                            </block>
                        </script>
                    </block>
                    <block s="doReport">
                        <block var="resp"/>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="add marker at longitude %&apos;long&apos; latitude %&apos;lat&apos; size %&apos;size&apos; color %&apos;color&apos;" type="command" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
            <input type="%s"></input>
            <input type="%n">5</input>
            <input type="%txt" readonly="true">#0000ff&#xD;&#xD; &#xD; <options>blue=#0000ff&#xD;green=#008000&#xD;red=#ff0000&#xD;yellow=#ffff00&#xD;orange=#ffc300&#xD;brown=#a04000&#xD;black=#000&#xD;white=#fff</options></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doRun">
                        <block s="reportJSFunction">
                            <list>
                                <l>long</l>
                                <l>lat</l>
                                <l>size</l>
                                <l>color</l>
                            </list>
                            <l>if(document.getElementById("leaflet_div") === null)&#xD;{&#xD; alert("Initialize the map first");&#xD;}&#xD;&#xD;var marker = L.circleMarker([long, lat]);&#xD;marker.setRadius(size);&#xD;marker.options.color=color;&#xD;marker.addTo(markerGroup);</l>
                        </block>
                        <list>
                            <block var="long"/>
                            <block var="lat"/>
                            <block var="size"/>
                            <block var="color"/>
                        </list>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="set server to current host" type="command" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs></inputs>
        <script>
            <block s="doWarp">
                <script>
                    <custom-block s="create SnapTwitter variables"></custom-block>
                    <block s="doSetVar">
                        <l>server</l>
                        <block s="evaluate">
                            <block s="reportJSFunction">
                                <list></list>
                                <l>return window.location.protocol + "//" + window.location.host;</l>
                            </block>
                            <list></list>
                        </block>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="plot: prepare" type="command" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs></inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list></list>
                    <l>if(document.getElementById("plotly_div") === null)&#xD;{&#xD; var sc = document.createElement(&apos;script&apos;);&#xD; sc.setAttribute("type","text/javascript");&#xD; sc.setAttribute("src", "/libraries/plotly/plotly.min.js");&#xD;&#xD;&#xD; document.getElementsByTagName("head")[0].appendChild(sc);&#xD;}&#xD;&#xD;if(document.getElementById("plotly_div") !== null) {&#xD; var el = document.getElementById("plotly_div");&#xD; el.parentNode.removeChild(el);&#xD;}&#xD;&#xD;var d =&#xD;&#xD; document.createElement(&apos;div&apos;);&#xD;d.setAttribute("id","plotly_div");&#xD;document.getElementsByTagName("body")[0].appendChild(d);&#xD;&#xD;stage = this.parentThatIsA(StageMorph);&#xD;plotlyResize = function(stage) {&#xD;&#xD;&#xD; if(!document.getElementById("plotly_div"))&#xD; return;&#xD; var offset = stage.height()+2+stage.parentThatIsA(IDE_Morph).corralBar.height();&#xD; if(document.getElementById("leaflet_div") != null &amp;&amp;&#xD;&#xD; document.getElementById("leaflet_div").style.display != "none")&#xD; offset += parseInt(document.getElementById("leaflet_div").style.height)+5;&#xD; document.getElementById("plotly_div").setAttribute("width", stage.width());&#xD;&#xD;&#xD; document.getElementById("plotly_div").setAttribute("height", stage.height());&#xD; document.getElementById("plotly_div").style.width = stage.width()+"px";&#xD; document.getElementById("plotly_div").style.height = stage.height()+"px";&#xD;&#xD;&#xD; document.getElementById("plotly_div").style.position = "absolute";&#xD; document.getElementById("plotly_div").style.left = stage.topLeft().x+"px";&#xD; document.getElementById("plotly_div").style.top = (stage.topLeft().y+offset)+"px";&#xD;&#xD;&#xD; document.getElementById("plotly_div").style.display = "block";&#xD; document.getElementById("plotly_div").style.backgroundColor = "black";&#xD;&#xD; if(typeof Plotly !== "undefined") {&#xD; redrawPlot();&#xD;&#xD;&#xD; };&#xD;}&#xD;plotlyResize(stage);&#xD;&#xD;d =&#xD;&#xD; document.createElement(&apos;div&apos;);&#xD;d.setAttribute("id","plotly_fsbutton_div");&#xD;d.setAttribute("class","leaflet-control-fullscreen")&#xD;document.getElementById("plotly_div").appendChild(d);&#xD;d.style.display =&#xD; "block";&#xD;d.style.top&#xD; = "5px";&#xD;d.style.left = "5px";&#xD;d.style.position = "absolute";&#xD;&#xD;a = document.createElement(&apos;a&apos;);&#xD;d.appendChild(a);&#xD;a.style.width = "25px";&#xD;a.style.height = "25px";&#xD;a.style.display&#xD; =&#xD; "block";&#xD;a.style.backgroundColor = "#eee";&#xD;a.href = "#";&#xD;&#xD;var plotlyFullscreen = false;&#xD;&#xD;a.onclick = function() {&#xD; if(!plotlyFullscreen) {&#xD; document.getElementById("plotly_div").style.width = "" +&#xD; window.innerWidth +&#xD; "px";&#xD; document.getElementById("plotly_div").width = window.innerWidth;&#xD; document.getElementById("plotly_div").style.height = "" + window.innerHeight + "px";&#xD; document.getElementById("plotly_div").height =&#xD; window.innerHeight;&#xD;&#xD; document.getElementById("plotly_div").style.left = "0px";&#xD; document.getElementById("plotly_div").style.top = "0px";&#xD; document.getElementById("plotly_div").style.zIndex = "9999";&#xD;&#xD;&#xD; document.getElementById("plotly_fsbutton_div").children[0].style.backgroundPosition = "0px -26px";&#xD; redrawPlot();&#xD; plotlyFullscreen = true;&#xD; } else {&#xD; plotlyResize(stage);&#xD; document.getElementById("plotly_div").style.zIndex =&#xD;&#xD; "";&#xD; plotlyFullscreen = false;&#xD; document.getElementById("plotly_fsbutton_div").children[0].style.backgroundPosition = "";&#xD; }&#xD;}&#xD; &#xD;myplot = {};&#xD;myplot.data = [];&#xD;myplot.layout = {&#xD; margin: { l: 30, r: 30, t: 20,&#xD; b:&#xD; 30 },&#xD;};&#xD;myplot.layout.shapes = [];&#xD;&#xD;redrawPlot = function() {&#xD; Plotly.newPlot(&apos;plotly_div&apos;,myplot.data,myplot.layout, {modeBarButtonsToRemove:&#xD;&#xD; [&apos;sendDataToCloud&apos;,&apos;zoom2d&apos;,&apos;autoScale2d&apos;,&apos;toggleSpikelines&apos;]});&#xD;}&#xD;&#xD;inChartBlock = true;</l>
                </block>
                <list></list>
            </block>
        </script>
    </block-definition>
    <block-definition s="plot: show specified features" type="command" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs></inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list></list>
                    <l>inChartBlock = false;&#xD;&#xD;timeout = 0;&#xD;if(typeof Plotly === "undefined")&#xD; timeout = 2000;&#xD;&#xD;setTimeout(function() {&#xD; redrawPlot();&#xD;}, timeout);</l>
                </block>
                <list></list>
            </block>
        </script>
    </block-definition>
    <block-definition s="implode list %&apos;l&apos;" type="reporter" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%l"></input>
        </inputs>
        <script>
            <block s="doDeclareVariables">
                <list>
                    <l>str</l>
                </list>
            </block>
            <block s="doWarp">
                <script>
                    <block s="doIf">
                        <block s="reportNot">
                            <block s="evaluate">
                                <block s="reportJSFunction">
                                    <list>
                                        <l>list</l>
                                    </list>
                                    <l>if(list == 0)&#xD; return false;&#xD;else&#xD; return true;</l>
                                </block>
                                <list>
                                    <block var="l"/>
                                    <l>empty</l>
                                </list>
                            </block>
                        </block>
                        <script>
                            <block s="doReport">
                                <l></l>
                            </block>
                        </script>
                    </block>
                    <block s="doIf">
                        <block s="reportEquals">
                            <l></l>
                            <l>0</l>
                        </block>
                        <script></script>
                    </block>
                    <block s="doSetVar">
                        <l>str</l>
                        <block s="reportListItem">
                            <l>1</l>
                            <block var="l"/>
                        </block>
                    </block>
                    <block s="doSetVar">
                        <l>l</l>
                        <block s="reportCDR">
                            <block var="l"/>
                        </block>
                    </block>
                    <block s="doRepeat">
                        <block s="reportListLength">
                            <block var="l"/>
                        </block>
                        <script>
                            <block s="doSetVar">
                                <l>str</l>
                                <block s="reportJoinWords">
                                    <list>
                                        <block var="str"/>
                                        <l>✝</l>
                                        <block s="reportListItem">
                                            <l>1</l>
                                            <block var="l"/>
                                        </block>
                                    </list>
                                </block>
                            </block>
                            <block s="doSetVar">
                                <l>l</l>
                                <block s="reportCDR">
                                    <block var="l"/>
                                </block>
                            </block>
                        </script>
                    </block>
                    <block s="doReport">
                        <block var="str"/>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="create SnapTwitter variables" type="command" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs></inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list></list>
                    <l>var createVar = function(varName,myself) {&#xD; if(!myself.isVariableNameInUse(varName)) {&#xD; myself.addVariable(varName, true);&#xD; myself.parentThatIsA(IDE_Morph).refreshPalette();&#xD;&#xD;&#xD; }&#xD;};&#xD;&#xD;createVar("server",this);&#xD;createVar("user",this);&#xD;createVar("password",this);</l>
                </block>
                <list></list>
            </block>
        </script>
    </block-definition>
    <block-definition s="🗺 marker: position %&apos;geo&apos; size %&apos;size&apos; color %&apos;color&apos;" type="command" category="map">
        <header></header>
        <code></code>
        <translations>de:🗺Marker: Position _ Größe _ Farbe _&#xD;</translations>
        <inputs>
            <input type="%s"></input>
            <input type="%n">5</input>
            <input type="%txt" readonly="true">#0000ff&#xD;&#xD; &#xD; <options>blue=#0000ff&#xD;green=#008000&#xD;red=#ff0000&#xD;yellow=#ffff00&#xD;orange=#ffc300&#xD;brown=#a04000&#xD;black=#000&#xD;white=#fff</options></input>
        </inputs>
        <script>
            <custom-block s="🗺 marker: position %s size %n color %txt popup text %txt">
                <block var="geo"/>
                <block var="size"/>
                <block var="color"/>
                <l></l>
            </custom-block>
        </script>
    </block-definition>
    <block-definition s="🗺 marker: position %&apos;geo&apos; size %&apos;size&apos; color %&apos;color&apos; popup text %&apos;text&apos;" type="command" category="map">
        <header></header>
        <code></code>
        <translations>de:🗺Marker: Position _ Größe _ Farbe _ Popup-Text _&#xD;</translations>
        <inputs>
            <input type="%s"></input>
            <input type="%n">5</input>
            <input type="%txt" readonly="true">#0000ff&#xD;&#xD; &#xD; <options>blue=#0000ff&#xD;green=#008000&#xD;red=#ff0000&#xD;yellow=#ffff00&#xD;orange=#ffc300&#xD;brown=#a04000&#xD;black=#000&#xD;white=#fff</options></input>
            <input type="%txt"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doRun">
                        <block s="reportJSFunction">
                            <list>
                                <l>geo</l>
                                <l>size</l>
                                <l>color</l>
                                <l>text</l>
                            </list>
                            <l>if (document.getElementById("leaflet_div") === null) {&#xD;&#xD;  var css = document.createElement("link");&#xD;  css.setAttribute("rel", "stylesheet");&#xD;  css.setAttribute("href", "/libraries/leaflet/leaflet.css");&#xD;&#xD;&#xD;  document.getElementsByTagName("head")[0].appendChild(css);&#xD;&#xD;  var sc = document.createElement("script");&#xD;  sc.setAttribute("type", "text/javascript");&#xD;  sc.setAttribute("src", "/libraries/leaflet/leaflet.js");&#xD;&#xD;&#xD;  document.getElementsByTagName("head")[0].appendChild(sc);&#xD;&#xD;  //setTimeout(function() {&#xD;    var css = document.createElement("link");&#xD;    css.setAttribute("rel", "stylesheet");&#xD;    css.setAttribute("href",&#xD;&#xD;      "/libraries/leaflet/leaflet.fullscreen.css");&#xD;    document.getElementsByTagName("head")[0].appendChild(css);&#xD;&#xD;    var sc = document.createElement("script");&#xD;    sc.setAttribute("type", "text/javascript");&#xD;&#xD;    sc.setAttribute("src",&#xD;      "/libraries/leaflet/leaflet.fullscreen.min.js");&#xD;    document.getElementsByTagName("head")[0].appendChild(sc);&#xD;  //}, 750);&#xD;  clusteringLoaded = false;&#xD;&#xD;  var d = document.createElement("div");&#xD;&#xD;  d.setAttribute("id",&#xD;    "leaflet_div");&#xD;  document.getElementsByTagName("body")[0].appendChild(d);&#xD;&#xD;  stage = this.parentThatIsA(StageMorph);&#xD;  leafletResize = function(stage) {&#xD;&#xD;    document.getElementById("leaflet_div").setAttribute("width",&#xD;      stage.width());&#xD;    document.getElementById("leaflet_div").setAttribute("height", stage.height());&#xD;    document.getElementById("leaflet_div").style.width = stage.width() + "px";&#xD;&#xD;    document.getElementById("leaflet_div").style.height =&#xD;      stage.height() + "px";&#xD;    document.getElementById("leaflet_div").style.position = "absolute";&#xD;    document.getElementById("leaflet_div").style.left = stage.topLeft().x + "px";&#xD;&#xD;    document.getElementById("leaflet_div").style.top =&#xD;      (stage.topLeft().y + stage.height() + stage.parentThatIsA(IDE_Morph).corralBar.height() + 2) + "px";&#xD;    document.getElementById("leaflet_div").style.display = "block";&#xD;&#xD;    document.getElementById("leaflet_div").style.backgroundColor =&#xD;      "black";&#xD;  }&#xD;  leafletResize(stage);&#xD;&#xD;  if (typeof plotlyResize !== "undefined")&#xD;    plotlyResize(stage);&#xD;&#xD;  &#xD;  function initMap() {&#xD;    if(typeof L == "undefined") {&#xD;      setTimeout(initMap, 500);&#xD;    } else {&#xD;      map =&#xD;        L.map("leaflet_div", {&#xD;          fullscreenControl: {&#xD;            pseudoFullscreen: true&#xD;          }&#xD;        }).setView([0, 0], 1);&#xD;&#xD;      satelliteLayer =&#xD;        L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}", {&#xD;          attribution: "Tiles &amp;copy; Esri &amp;mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"&#xD;        });&#xD;      streetLayer = L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {&#xD;        attribution: "&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors"&#xD;      });&#xD;&#xD;      streetLayer.addTo(map);&#xD;&#xD;      markerGroup = L.layerGroup().addTo(map);&#xD;    }&#xD;  }&#xD;  initMap();  &#xD;}&#xD;&#xD;function createMarker() {&#xD;  if(typeof L == "undefined") {&#xD;    setTimeout(initMap, 500);&#xD;    return;&#xD;  }&#xD;  &#xD;  timeout =&#xD;    0;&#xD;&#xD;  if (typeof markergroup === "undefined")&#xD;    timeout = 2000;&#xD;&#xD;  coords = geo.split(";");&#xD;&#xD;  var marker = L.circleMarker([coords[0], coords[1]]);&#xD;  marker.setRadius(size);&#xD;  marker.options.color = color;&#xD;&#xD;  var&#xD;    toHtmlList =&#xD;    function(l) {&#xD;      if (typeof l == "undefined")&#xD;        return "null";&#xD;      if (typeof l.contents == "undefined")&#xD;        return l;&#xD;      var ret = l.contents[0] + ": ";&#xD;      if (typeof l.contents[1] != "undefined" &amp;&amp; typeof l.contents[1] ==&#xD;        "object") {&#xD;        for (let c in l.contents[1])&#xD;          ret += c + ",";&#xD;      } else {&#xD;        ret += l.contents[1];&#xD;      }&#xD;      return ret;&#xD;    }&#xD;&#xD;  var toHtmlTable = function(tbl) {&#xD;&#xD;    if (typeof tbl == "undefined" || tbl ==&#xD;      null)&#xD;&#xD;      return "null";&#xD;    if (typeof tbl.contents == "undefined")&#xD;      return "null";&#xD;    if (typeof tbl.contents[0] == "undefined")&#xD;      return "null";&#xD;&#xD;    // check if 2-dim&#xD;    if (typeof tbl.contents[0].contents == "undefined")&#xD;&#xD;      return&#xD;    toHtmlList(tbl);&#xD;&#xD;    var ret = "&lt;table style=\"border-collapse:collapse;\"&gt;";&#xD;    for (let r of tbl.contents) {&#xD;      ret += "&lt;tr&gt;";&#xD;      for (let c of r.contents) {&#xD;        if (typeof c == "null")&#xD;          continue;&#xD;        if (typeof c ==&#xD;          "object") {&#xD;          c = toHtmlTable(c);&#xD;        }&#xD;        ret += "&lt;td style=\"vertical-align:top; border-bottom: 1px solid #000;\"&gt;" + c + "&lt;/td&gt;";&#xD;      }&#xD;      ret += "&lt;/tr&gt;";&#xD;    }&#xD;    ret += "&lt;/table&gt;";&#xD;&#xD;    return&#xD;&#xD;    ret;&#xD;  }&#xD;&#xD;  setTimeout(function() {&#xD;    if (text == "")&#xD;      marker.addTo(markerGroup);&#xD;    else {&#xD;      if (typeof text == "object") {&#xD;        var tbl = "&lt;div style=\"display: block; height: 20em; overflow: scroll; font-size:80%;\"&gt;" +&#xD;          toHtmlTable(text) + "&lt;/div&gt;";&#xD;        marker.addTo(markerGroup).bindPopup(tbl);&#xD;      } else {&#xD;        marker.addTo(markerGroup).bindPopup(text);&#xD;      }&#xD;    }&#xD;  }, timeout)&#xD;}&#xD;createMarker();</l>
                        </block>
                        <list>
                            <block var="geo"/>
                            <block var="size"/>
                            <block var="color"/>
                            <block var="text"/>
                        </list>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="🗺 set clustering %&apos;active&apos;" type="command" category="map">
        <header></header>
        <code></code>
        <translations>de:🗺Clustering aktiv _&#xD;</translations>
        <inputs>
            <input type="%b">true</input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doIf">
                        <block var="active"/>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>if(!clusteringLoaded) {&#xD; var css2 = document.createElement(&apos;link&apos;);&#xD; css2.setAttribute("rel","stylesheet");&#xD; css2.setAttribute("href", "/libraries/leaflet/MarkerCluster.css");&#xD; var css3 =&#xD;&#xD; document.createElement(&apos;link&apos;);&#xD; css3.setAttribute("rel","stylesheet");&#xD; css3.setAttribute("href", "/libraries/leaflet/MarkerCluster.default.css");&#xD; document.getElementsByTagName("head")[0].appendChild(css3);&#xD; var sc2 =&#xD;&#xD; document.createElement(&apos;script&apos;);&#xD; sc2.setAttribute("type","text/javascript");&#xD; sc2.setAttribute("src", "/libraries/leaflet/leaflet.markercluster.js");&#xD;&#xD;&#xD; document.getElementsByTagName("head")[0].appendChild(sc2);&#xD;}&#xD;&#xD;var time = 0;&#xD;if(!clusteringLoaded) {&#xD; clusteringLoaded = true;&#xD; time = 800;&#xD;}&#xD;&#xD;setTimeout(function() { &#xD; var markerClusterGroup =&#xD;&#xD; L.markerClusterGroup();&#xD; markerClusterGroup.addLayers(markerGroup.getLayers());&#xD; map.removeLayer(markerGroup);&#xD; markerGroup = markerClusterGroup;&#xD; map.addLayer(markerGroup);&#xD;}, 800);</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                    <block s="doIf">
                        <block s="reportNot">
                            <block var="active"/>
                        </block>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>var markerNormalGroup = L.layerGroup();&#xD;for (let l of markerGroup.getLayers())&#xD; markerNormalGroup.addLayer(l);&#xD;map.removeLayer(markerGroup);&#xD;markerGroup = markerNormalGroup;&#xD;map.addLayer(markerGroup);</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="🗺 set satellite view %&apos;active&apos;" type="command" category="map">
        <header></header>
        <code></code>
        <translations>de:🗺Satellitenansicht aktiv _&#xD;</translations>
        <inputs>
            <input type="%b">true</input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doIf">
                        <block var="active"/>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>streetLayer.removeFrom(map);&#xD;satelliteLayer.addTo(map);</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                    <block s="doIf">
                        <block s="reportNot">
                            <block var="active"/>
                        </block>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>satelliteLayer.removeFrom(map);&#xD;streetLayer.addTo(map);</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="🗺 remove markers" type="command" category="map">
        <header></header>
        <code></code>
        <translations>de:🗺Marker entfernen&#xD;</translations>
        <inputs></inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doRun">
                        <block s="reportJSFunction">
                            <list></list>
                            <l>if(document.getElementById("leaflet_div") === null)&#xD;{&#xD; alert("Initialize the map first");&#xD;}&#xD;&#xD;markerGroup.clearLayers();</l>
                        </block>
                        <list></list>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="🗺 reset map position and size" type="command" category="map">
        <header></header>
        <code></code>
        <translations>de:🗺Kartenposition und -größe zurücksetzen&#xD;</translations>
        <inputs></inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doRun">
                        <block s="reportJSFunction">
                            <list></list>
                            <l>leafletResize(stage);</l>
                        </block>
                        <list></list>
                    </block>
                    <custom-block s="📊 reset chart position and size"></custom-block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="🐦 single tweet" type="reporter" category="twitter">
        <header></header>
        <code></code>
        <translations>de:🐦einzelner Tweet&#xD;</translations>
        <inputs></inputs>
        <script>
            <block s="doReport">
                <custom-block s="SnapTwitter request %s">
                    <l>twitter/get/complete</l>
                </custom-block>
            </block>
        </script>
    </block-definition>
    <block-definition s="🐦 text from tweet %&apos;tweet&apos;" type="reporter" category="twitter">
        <header></header>
        <code></code>
        <translations>de:🐦Text von Tweet _&#xD;</translations>
        <inputs>
            <input type="%obj"></input>
        </inputs>
        <script>
            <block s="doReport">
                <custom-block s="🐦 attribute %s from tweet %obj">
                    <l>text</l>
                    <block var="tweet"/>
                </custom-block>
            </block>
        </script>
    </block-definition>
    <block-definition s="🐦 attribute %&apos;attrib&apos; from tweet %&apos;tw&apos;" type="reporter" category="twitter">
        <header></header>
        <code></code>
        <translations>de:🐦Attribut _ von Tweet _&#xD;</translations>
        <inputs>
            <input type="%s"></input>
            <input type="%obj"></input>
        </inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>text</l>
                        </list>
                        <l>// remove quotation marks&#xD;return text.replace(/^"(.*)"$/,"$1");</l>
                    </block>
                    <list>
                        <custom-block s="SnapTwitter POST %s data %s">
                            <block s="reportJoinWords">
                                <list>
                                    <l>json/get/attrib/</l>
                                    <block var="attrib"/>
                                </list>
                            </block>
                            <block var="tw"/>
                        </custom-block>
                    </list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="🐦 geo of tweet %&apos;tweet&apos;" type="reporter" category="twitter">
        <header></header>
        <code></code>
        <translations>de:🐦Geodaten von Tweet _&#xD;</translations>
        <inputs>
            <input type="%obj"></input>
        </inputs>
        <script>
            <block s="doReport">
                <custom-block s="SnapTwitter POST %s data %s">
                    <l>json/get/geo</l>
                    <block var="tweet"/>
                </custom-block>
            </block>
        </script>
    </block-definition>
    <block-definition s="🐦 tweet %&apos;t&apos; as table" type="reporter" category="twitter">
        <header></header>
        <code></code>
        <translations>de:🐦Tweet _ als Tabelle&#xD;</translations>
        <inputs>
            <input type="%obj"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doReport">
                        <custom-block s="listify %s">
                            <block var="t"/>
                        </custom-block>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="🐦 for each %&apos;🐦 tweet&apos; %&apos;cmd&apos;" type="command" category="twitter">
        <header></header>
        <code></code>
        <translations>de:🐦für jeden _ _&#xD;</translations>
        <inputs>
            <input type="%upvar"></input>
            <input type="%cs"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doForever">
                        <script>
                            <block s="doSetVar">
                                <l>🐦 tweet</l>
                                <custom-block s="🐦 single tweet"></custom-block>
                            </block>
                            <block s="doRun">
                                <block var="cmd"/>
                                <list>
                                    <block var="🐦 tweet"/>
                                </list>
                            </block>
                        </script>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊create chart %&apos;features&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Diagramm erzeugen _&#xD;</translations>
        <inputs>
            <input type="%cs"></input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <custom-block s="plot: prepare"></custom-block>
                    <block s="doRun">
                        <block var="features"/>
                        <list></list>
                    </block>
                    <custom-block s="plot: show specified features"></custom-block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 bar chart: values %&apos;vals&apos; labels %&apos;labels&apos; name %&apos;name&apos; colors %&apos;colors&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Balkendiagramm: Werte _ Beschriftungen _ Name _ Farben _&#xD;</translations>
        <inputs>
            <input type="%l"></input>
            <input type="%l"></input>
            <input type="%txt"></input>
            <input type="%l"></input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>name</l>
                        <l>values</l>
                        <l>type</l>
                        <l>colors</l>
                        <l>labels</l>
                    </list>
                    <l>if(typeof inChartBlock == "undefined" || !inChartBlock) {&#xD; alert("Chart blocks only work within the \"c-shaped\" chart block!");&#xD; return;&#xD;}&#xD;&#xD;&#xD;values = "" + values; &#xD;var valuesArray =&#xD;&#xD; values.split("✝");&#xD;if(valuesArray === null || valuesArray == "" || valuesArray.length == 0) {&#xD; alert("No data defined for plot");&#xD; return;&#xD;}&#xD;var trace={y:valuesArray,type:type,name:name}; &#xD;&#xD;labels = "" +&#xD; labels;&#xD;var&#xD; labelsArray = labels.split("✝");&#xD;if(labelsArray !== null &amp;&amp; labelsArray != "" &amp;&amp; labelsArray.length &gt; 0)&#xD; trace.x = labelsArray;&#xD;&#xD;colors = "" + colors;&#xD;var colorsArray =&#xD;&#xD; colors.split("✝");&#xD;if(colorsArray.length &gt; 0) {&#xD; trace.marker = {color: []};&#xD; for (let col of colorsArray) {&#xD; trace.marker.color.push(col);&#xD; }&#xD;}&#xD;&#xD;myplot.data.push(trace);</l>
                </block>
                <list>
                    <block var="name"/>
                    <custom-block s="implode list %l">
                        <block var="vals"/>
                    </custom-block>
                    <l>bar</l>
                    <custom-block s="implode list %l">
                        <block var="colors"/>
                    </custom-block>
                    <custom-block s="implode list %l">
                        <block var="labels"/>
                    </custom-block>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 horizontal line: y = %&apos;y&apos; color %&apos;color&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Horizontale Linie: y = _ Farbe _&#xD;</translations>
        <inputs>
            <input type="%n"></input>
            <input type="%s">#000000</input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>y</l>
                        <l>col</l>
                    </list>
                    <l>if(typeof inChartBlock == "undefined" || !inChartBlock) {&#xD; alert("Chart blocks only work within the \"c-shaped\" chart block!");&#xD; return;&#xD;}&#xD;&#xD;&#xD;s = {&#xD; type: &apos;line&apos;,&#xD; xref: &apos;paper&apos;,&#xD; y0:&#xD; y,&#xD;&#xD; y1: y,&#xD; x0: 0,&#xD; x1: 1,&#xD; line: {&#xD; }&#xD;};&#xD;&#xD;if(col != null &amp;&amp; col.length &gt; 1) {&#xD; s.line.color = col;&#xD;}&#xD;&#xD;myplot.layout.shapes.push(s);</l>
                </block>
                <list>
                    <block var="y"/>
                    <block var="color"/>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 line chart: y values %&apos;vals&apos; name %&apos;name&apos; color: %&apos;col&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Liniendiagramm: y-Werte _ Name _ Farbe _&#xD;</translations>
        <inputs>
            <input type="%l"></input>
            <input type="%txt"></input>
            <input type="%txt">#00cc00</input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>name</l>
                        <l>values</l>
                        <l>type</l>
                        <l>col</l>
                    </list>
                    <l>if(typeof inChartBlock == "undefined" || !inChartBlock) {&#xD; alert("Chart blocks only work within the \"c-shaped\" chart block!");&#xD; return;&#xD;}&#xD;&#xD;values = "" + values; &#xD;var valuesArray = values.split("✝");&#xD;var&#xD;&#xD; trace={y:valuesArray,type:type,name:name}; &#xD;&#xD;if(col != null &amp;&amp; col.length &gt; 1) { &#xD; trace.color = col;&#xD; trace.marker = {};&#xD; trace.marker.color = trace.color;&#xD;}&#xD;&#xD;myplot.data.push(trace);</l>
                </block>
                <list>
                    <block var="name"/>
                    <custom-block s="implode list %l">
                        <block var="vals"/>
                    </custom-block>
                    <l>line</l>
                    <block var="col"/>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 pie chart: values %&apos;vals&apos; names %&apos;name&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Tortendiagramm: Werte _ Namen _&#xD;</translations>
        <inputs>
            <input type="%l"></input>
            <input type="%l"></input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>names</l>
                        <l>values</l>
                        <l>type</l>
                    </list>
                    <l>if(typeof inChartBlock == "undefined" || !inChartBlock) {&#xD; alert("Chart blocks only work within the \"c-shaped\" chart block!");&#xD; return;&#xD;}&#xD;&#xD;values = "" + values; &#xD;var valuesArray = values.split("✝");&#xD;&#xD;names = ""&#xD; +&#xD; names;&#xD;var namesArray = names.split("✝");&#xD;&#xD;var data = {&#xD; values:valuesArray,&#xD; type:type,&#xD; labels:namesArray,&#xD;}; &#xD;&#xD;myplot.data.push(data);</l>
                </block>
                <list>
                    <custom-block s="implode list %l">
                        <block var="name"/>
                    </custom-block>
                    <custom-block s="implode list %l">
                        <block var="vals"/>
                    </custom-block>
                    <l>pie</l>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 bubble chart: x values %&apos;xvals&apos; y values %&apos;yvals&apos; bubble sizes %&apos;sizes&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Blasendiagramm: x-Werte _ y-Werte _ Blasengrößen _&#xD;</translations>
        <inputs>
            <input type="%l"></input>
            <input type="%l"></input>
            <input type="%l"></input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>xvals</l>
                        <l>yvals</l>
                        <l>sizes</l>
                    </list>
                    <l>if(typeof inChartBlock == "undefined" || !inChartBlock) {&#xD; alert("Chart blocks only work within the \"c-shaped\" chart block!");&#xD; return;&#xD;}&#xD;&#xD;xvals = "" + xvals;&#xD;yvals = "" + yvals;&#xD;sizes = "" + sizes;&#xD;var xArray&#xD; =&#xD; xvals.split("✝");&#xD;var yArray = yvals.split("✝");&#xD;var sArray = sizes.split("✝");&#xD;&#xD;var data = {&#xD; x:xArray,&#xD; y:yArray,&#xD; mode: &apos;markers&apos;,&#xD; marker: {&#xD; size: sArray&#xD;&#xD;&#xD; }&#xD;};&#xD;&#xD;myplot.data.push(data);</l>
                </block>
                <list>
                    <custom-block s="implode list %l">
                        <block var="xvals"/>
                    </custom-block>
                    <custom-block s="implode list %l">
                        <block var="yvals"/>
                    </custom-block>
                    <custom-block s="implode list %l">
                        <block var="sizes"/>
                    </custom-block>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 scatter chart: x values %&apos;xvals&apos; y values %&apos;yvals&apos; color %&apos;col&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Streudiagramm: x-Werte _ y-Werte _ Farbe _&#xD;</translations>
        <inputs>
            <input type="%l"></input>
            <input type="%l"></input>
            <input type="%s">#0000ff</input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>xvals</l>
                        <l>yvals</l>
                        <l>col</l>
                    </list>
                    <l>if(typeof inChartBlock == "undefined" || !inChartBlock) {&#xD; alert("Chart blocks only work within the \"c-shaped\" chart block!");&#xD; return;&#xD;}&#xD;&#xD;xvals = "" + xvals;&#xD;yvals = "" + yvals;&#xD;var xArray =&#xD; xvals.split("✝");&#xD;var&#xD; yArray = yvals.split("✝");&#xD;&#xD;var data = {&#xD; x:xArray,&#xD; y:yArray,&#xD; mode: &apos;markers&apos;,&#xD; type: &apos;scatter&apos;,&#xD; marker: {&#xD; color: col&#xD;&#xD; }&#xD;};&#xD;&#xD;myplot.data.push(data);</l>
                </block>
                <list>
                    <custom-block s="implode list %l">
                        <block var="xvals"/>
                    </custom-block>
                    <custom-block s="implode list %l">
                        <block var="yvals"/>
                    </custom-block>
                    <block var="col"/>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 set chart visible %&apos;active&apos;" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Diagramm sichtbar _&#xD;</translations>
        <inputs>
            <input type="%b">false</input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doIf">
                        <block var="active"/>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>document.getElementById("plotly_div").style.display = "block";</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                    <block s="doIf">
                        <block s="reportNot">
                            <block var="active"/>
                        </block>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>document.getElementById("plotly_div").style.display = "none";</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="📊 reset chart position and size" type="command" category="chart">
        <header></header>
        <code></code>
        <translations>de:📊Diagrammposition und -größe zurücksetzen&#xD;</translations>
        <inputs></inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doRun">
                        <block s="reportJSFunction">
                            <list></list>
                            <l>if(typeof plotlyResize !== "undefined") { plotlyResize(stage); }</l>
                        </block>
                        <list></list>
                    </block>
                    <custom-block s="plot: show specified features"></custom-block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="check login" type="command" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs></inputs>
        <script>
            <block s="doIf">
                <block s="reportOr">
                    <block s="reportLessThan">
                        <block s="reportStringSize">
                            <block var="user"/>
                        </block>
                        <l>2</l>
                    </block>
                    <block s="reportLessThan">
                        <block s="reportStringSize">
                            <block var="password"/>
                        </block>
                        <l>2</l>
                    </block>
                </block>
                <script>
                    <block s="doSetVar">
                        <l>user</l>
                        <block s="evaluate">
                            <block s="reportJSFunction">
                                <list></list>
                                <l>return prompt("Please enter username:");</l>
                            </block>
                            <list></list>
                        </block>
                    </block>
                    <block s="doSetVar">
                        <l>password</l>
                        <block s="evaluate">
                            <block s="reportJSFunction">
                                <list></list>
                                <l>return prompt("Please enter password:");</l>
                            </block>
                            <list></list>
                        </block>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="🗺 set map visible %&apos;active&apos;" type="command" category="map">
        <header></header>
        <code></code>
        <translations>de:🗺Karte sichtbar _&#xD;</translations>
        <inputs>
            <input type="%b">false</input>
        </inputs>
        <script>
            <block s="doWarp">
                <script>
                    <block s="doIf">
                        <block var="active"/>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>document.getElementById("leaflet_div").style.display = "block";&#xD;if(typeof plotlyResize !== "undefined")&#xD; plotlyResize(stage);</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                    <block s="doIf">
                        <block s="reportNot">
                            <block var="active"/>
                        </block>
                        <script>
                            <block s="doRun">
                                <block s="reportJSFunction">
                                    <list></list>
                                    <l>document.getElementById("leaflet_div").style.display = "none";&#xD;if(typeof plotlyResize !== "undefined")&#xD; plotlyResize(stage);</l>
                                </block>
                                <list></list>
                            </block>
                        </script>
                    </block>
                </script>
            </block>
        </script>
    </block-definition>
    <block-definition s="📂table %&apos;list&apos; → CSV, filename %&apos;f&apos;" type="command" category="data">
        <header></header>
        <code></code>
        <translations>de:📂Tabelle _ → CSV, Dateiname _&#xD;</translations>
        <inputs>
            <input type="%s"></input>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>list</l>
                        <l>filename</l>
                    </list>
                    <l>if(!list.canBeCSV()) {&#xD;  alert("Only two-dimensional lists (tables) can be converted to CSV");&#xD;  return;&#xD;}&#xD;&#xD;var dl = document.createElement(&apos;a&apos;);&#xD;dl.style.display = &apos;none&apos;;&#xD;dl.setAttribute(&apos;href&apos;, &apos;data:text/csv;charset=utf-8,&apos; + encodeURIComponent(list.asCSVsem()));&#xD;dl.setAttribute(&apos;download&apos;, filename);&#xD;&#xD;document.body.appendChild(dl);&#xD;dl.click();&#xD;document.body.removeChild(dl);</l>
                </block>
                <list>
                    <block var="list"/>
                    <block var="f"/>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="CSV %&apos;csv&apos; → table, delimiter %&apos;del&apos;" type="reporter" category="internal">
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
            <input type="%s">;<options>,&#xD;;</options></input>
        </inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>csv</l>
                            <l>sep</l>
                        </list>
                        <l>array = csv.split(&apos;\n&apos;).map( row =&gt; row.split(&apos;;&apos;) ).map( row =&gt; row.map( str =&gt; str.replace(/^\"(.*)\"/, "$1") ) );&#xD;maxLen = Math.max.apply(Math, array.map(row =&gt; row.length));&#xD;array = array.filter(row =&gt; row.length == maxLen);&#xD;&#xD;return new List(array.map( row =&gt; new List(row) ));</l>
                    </block>
                    <list>
                        <block var="csv"/>
                        <block var="del"/>
                    </list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="📂CSV from URL %&apos;url&apos; → table, delimiter %&apos;del&apos;" type="reporter" category="data">
        <header></header>
        <code></code>
        <translations>de:📂CSV von URL _ → Tabelle, Trennzeichen _&#xD;</translations>
        <inputs>
            <input type="%s"></input>
            <input type="%s">;<options>;&#xD;,</options></input>
        </inputs>
        <script>
            <block s="doReport">
                <custom-block s="CSV %s → table, delimiter %s">
                    <block s="reportURL">
                        <block s="reportJoinWords">
                            <list>
                                <l>https://cors-anywhere.herokuapp.com/</l>
                                <block var="url"/>
                            </list>
                        </block>
                    </block>
                    <block var="del"/>
                </custom-block>
            </block>
        </script>
    </block-definition>
    <block-definition s="📂uploaded file" type="reporter" category="sensing">
        <header></header>
        <code></code>
        <translations>de:📂hochgeladene Datei&#xD;</translations>
        <inputs></inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>proc</l>
                        </list>
                        <l>if (!proc.fileReaderState) {&#xD;  proc.fileReaderState = 1;&#xD;  proc.file = "";&#xD;  proc.reader = "";&#xD;&#xD;  up = document.createElement("input");&#xD;  up.setAttribute("type", "file");&#xD;  up.setAttribute("name", "file");&#xD;  up.addEventListener(&apos;change&apos;, function(evt) {&#xD;	   if(evt.target.files &amp;&amp; evt.target.files.length &gt; 0) {&#xD;     	proc.file = evt.target.files[0];&#xD;	   } else {&#xD;      proc.file = "err";&#xD;    }&#xD;    proc.fileReaderState = 2;&#xD;  }, false);&#xD;  document.body.appendChild(up);&#xD;  up.click();&#xD;  document.body.removeChild(up);&#xD;} else if (proc.fileReaderState == 2) {&#xD;  proc.reader = new FileReader();&#xD;  proc.reader.readAsText(proc.file);&#xD;  proc.fileReaderState = 3;  &#xD;} else if (proc.fileReaderState == 3 &amp;&amp; proc.reader.readyState == proc.reader.DONE) {&#xD;  proc.fileReaderState = null;&#xD;  proc.file = null;&#xD;  res = proc.reader.result;&#xD;  proc.reader = null;&#xD;  return res;&#xD;}&#xD;proc.pushContext(&apos;doYield&apos;);&#xD;proc.pushContext();</l>
                    </block>
                    <list></list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="📂CSV from upload → table, delimiter %&apos;del&apos;" type="reporter" category="data">
        <header></header>
        <code></code>
        <translations>de:📂CSV aus Upload → Tabelle, Trennzeichen _&#xD;</translations>
        <inputs>
            <input type="%s">;<options>;&#xD;,</options></input>
        </inputs>
        <script>
            <block s="doReport">
                <custom-block s="CSV %s → table, delimiter %s">
                    <custom-block s="📂uploaded file"></custom-block>
                    <block var="del"/>
                </custom-block>
            </block>
        </script>
    </block-definition>
</blocks>